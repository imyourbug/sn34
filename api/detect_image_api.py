import base64
import sys
import os
import requests
from dotenv import load_dotenv
import time


class DetectImageAPI:
    def __init__(self):
        # Load the environment variables from .env file
        load_dotenv()
        self.url = "https://api.sightengine.com/1.0/check.json"
        self.token = os.getenv("TOKEN_API")
        self.user = os.getenv("USER_API")
        print(f"TOKEN_API call api {self.token}")
        print(f"USER_API call api {self.user}")

    def check_image(self, img_name):
        try:
            # Call api
            params = {
                "models": "genai",
                "api_user": self.user,
                "api_secret": self.token,
            }
            files = {"media": open(f"images/{img_name}", "rb")}
            response = requests.post(self.url, files=files, data=params)
            print(f"Response call API sightengine: {response.json()}")
            if response.status_code != 200:
                print(
                    f"Error call API sightengine return code != 200: {response.status_code}"
                )
                return -1
            response_json = response.json()
            # 1 if AI is detected and false if AI is not detected
            return 1 if float(response_json["type"]["ai_generated"]) >= 0.5 else 0
        except Exception as e:
            print(f"Exception call API sightengine: {e}")
            return -1

if __name__ == "__main__":
    image_input = """"""
    path = "images"
    os.makedirs(path, exist_ok=True)
    image_bytes = base64.b64decode(image_input)
    img_name = f"output_image_{int(time.time())}.jpeg"
    with open(f"images/{img_name}", "wb") as image_file:
        image_file.write(image_bytes)
    detect_api = DetectImageAPI()
    detect_api.check_image(img_name)
